1. Función Search (Búsqueda)
Descripción: Busca todos los registros de índice en un R-Tree cuyos rectángulos se superponen con un rectángulo de búsqueda (S). Es la operación principal para consultas espaciales, como encontrar objetos que intersectan una región.

Entrada:

T: Nodo raíz del R-Tree (nodo intermedio o hoja).
S: Rectángulo de búsqueda (e.g., (I_0, I_1, ..., I_{n-1}), donde I_i = [a, b] en la dimensión i).
Salida:

Conjunto de registros de índice (I, tuple-identifier) cuyos rectángulos I se superponen con S.
Método (Sección 3.1, Página 3):

S1. Búsqueda en subárboles:
Si T no es un nodo hoja:
Para cada entrada E = (I, child-pointer) en T:
Verifica si E.I (rectángulo de la entrada) se superpone con S.
Si hay superposición, llama a Search en el árbol cuyo nodo raíz es apuntado por E.p (puntero al hijo).
S2. Búsqueda en nodo hoja:
Si T es un nodo hoja:
Verifica cada entrada E = (I, tuple-identifier) en T.
Si E.I se superpone con S, incluye E en el resultado.
Funciones llamadas:

Search (recursiva): Se llama a sí misma para explorar nodos hijos cuando E.I se superpone con S. La recursión termina en nodos hoja.
Propósito:

Encontrar todos los objetos espaciales que intersectan una región de búsqueda.
Minimizar los nodos visitados, aunque la superposición entre rectángulos en nodos intermedios puede requerir explorar múltiples subárboles.
Ejemplo:

Supongamos un R-Tree con nodos intermedios A (cubre RECT_A) y B (cubre RECT_B). Si S se superpone con ambos, Search llama a Search(A, S) y Search(B, S), explorando ambos subárboles.
Contexto de uso:

Usada en GIS (encontrar regiones en un mapa), CAD (buscar componentes en un diseño), o bases de datos espaciales (consultas de proximidad).
Detalles:

La superposición en nodos intermedios puede aumentar los accesos a disco, especialmente en búsquedas con rectángulos grandes, a diferencia de los R+-Trees.
2. Función Insert (Inserción)
Descripción: Inserta un nuevo registro de índice (E) en el R-Tree, colocando el registro en un nodo hoja y ajustando la estructura si es necesario.

Entrada:

E: Registro de índice (I, tuple-identifier), donde I es el rectángulo que cubre el objeto.
Un R-Tree con nodo raíz implícito.
Salida:

El nuevo R-Tree tras la inserción de E.
Método (Sección 3.2, Página 4):

I1. Encontrar posición para el nuevo registro:
Llama a ChooseLeaf para seleccionar un nodo hoja L donde colocar E.
I2. Agregar registro al nodo hoja:
Si L tiene espacio (menos de M entradas), agrega E a L.
Si L está lleno, llama a SplitNode para dividir L en L y LL, distribuyendo E y las entradas antiguas.
I3. Propagar cambios hacia arriba:
Llama a AdjustTree en L, pasando LL si se realizó una división.
I4. Hacer el árbol más alto:
Si la división propagada dividió la raíz, crea una nueva raíz con los dos nodos resultantes como hijos.
Funciones llamadas:

ChooseLeaf: Selecciona el nodo hoja para insertar E.
SplitNode: Divide un nodo lleno en dos.
AdjustTree: Ajusta los rectángulos de cobertura y propaga divisiones hacia arriba.
Propósito:

Insertar dinámicamente nuevos objetos espaciales.
Mantener las propiedades del R-Tree (balanceo, cobertura mínima).
Ejemplo:

Insertar E con rectángulo I. ChooseLeaf selecciona un nodo hoja L con 49 entradas (M=50). Agregar E causa un desbordamiento, por lo que SplitNode divide L en L y LL. AdjustTree propaga los cambios.
Contexto de uso:

Usada en aplicaciones dinámicas donde se agregan nuevos objetos, como en CAD o GIS.
Detalles:

La elección del nodo hoja minimiza la ampliación del rectángulo de cobertura, optimizando la estructura para búsquedas futuras.
3. Función ChooseLeaf (Selección de Nodo Hoja)
Descripción: Selecciona un nodo hoja donde insertar un nuevo registro de índice (E).

Entrada:

E: Registro de índice (I, tuple-identifier) a insertar.
Nodo raíz implícito.
Salida:

Nodo hoja L donde insertar E.
Método (Sección 3.2, Página 4):

CL1. Inicializar:
Establece N como el nodo raíz.
CL2. Verificar si es hoja:
Si N es un nodo hoja, retorna N.
CL3. Elegir subárbol:
Si N no es un nodo hoja, selecciona la entrada F en N cuyo rectángulo F.I requiera la menor ampliación para incluir E.I. En caso de empate, elige la entrada con el rectángulo de menor área.
CL4. Descender hasta una hoja:
Establece N como el nodo hijo apuntado por F.p y repite desde CL2.
Funciones llamadas:

Ninguna. Es una función auxiliar que no invoca otras funciones.
Propósito:

Encontrar el nodo hoja más adecuado para minimizar la ampliación de los rectángulos de cobertura, mejorando el rendimiento de búsquedas.
Ejemplo:

Para insertar E con rectángulo E.I, ChooseLeaf desciende desde la raíz, eligiendo en cada nivel la entrada que requiera la menor ampliación para incluir E.I, hasta llegar a una hoja.
Contexto de uso:

Llamada por Insert para determinar dónde colocar un nuevo registro.
Detalles:

La minimización de la ampliación reduce el área de los rectángulos, lo que disminuye la superposición y mejora las búsquedas.
4. Función AdjustTree (Ajuste del Árbol)
Descripción: Ajusta los rectángulos de cobertura y propaga divisiones de nodos desde un nodo hoja hasta la raíz.

Entrada:

L: Nodo hoja donde se realizó una inserción.
NN: Nodo adicional (si L fue dividido, NN es el segundo nodo resultante; de lo contrario, es nulo).
Salida:

El R-Tree ajustado.
Método (Sección 3.2, Página 4):

AT1. Inicializar:
Establece N = L. Si L fue dividido, establece NN como el segundo nodo.
AT2. Verificar si se terminó:
Si N es la raíz, termina.
AT3. Ajustar rectángulo de cobertura en la entrada padre:
Sea P el nodo padre de N y E_N la entrada de N en P. Ajusta E_N.I para que cubra exactamente todas las entradas en N.
AT4. Propagar división de nodo hacia arriba:
Si N tiene un nodo asociado NN (de una división previa):
Crea una nueva entrada E_NN con E_NN.p apuntando a NN y E_NN.I cubriendo todas las entradas en NN.
Agrega E_NN a P si hay espacio.
Si P está lleno, llama a SplitNode para dividir P en P y PP, y establece NN = PP.
AT5. Subir al siguiente nivel:
Establece N = P y repite desde AT2.
Funciones llamadas:

SplitNode: Se invoca si el nodo padre P excede M tras agregar una nueva entrada.
Propósito:

Asegurar que los rectángulos de cobertura reflejen los cambios tras una inserción.
Propagar divisiones de nodos hacia la raíz.
Ejemplo:

Tras dividir un nodo hoja L en L y LL, AdjustTree ajusta el rectángulo de cobertura de L en su padre P. Si P excede M al agregar LL, SplitNode divide P.
Contexto de uso:

Llamada por Insert para finalizar la inserción.
Detalles:

Garantiza que los rectángulos de cobertura sean lo más pequeños posible, reduciendo la superposición.
5. Función Delete (Eliminación)
Descripción: Elimina un registro de índice (E) del R-Tree, localizando el nodo hoja que lo contiene y ajustando la estructura.

Entrada:

E: Registro de índice (I, tuple-identifier) a eliminar.
Un R-Tree con nodo raíz implícito.
Salida:

El nuevo R-Tree tras la eliminación de E.
Método (Sección 3.3, Página 4):

D1. Encontrar nodo que contiene el registro:
Llama a FindLeaf para localizar el nodo hoja L que contiene E. Si no se encuentra, termina.
D2. Eliminar registro:
Elimina E de L.
D3. Propagar cambios:
Llama a CondenseTree pasando L.
D4. Acortar el árbol:
Si la raíz tiene solo un hijo tras los ajustes, hace que el hijo sea la nueva raíz.
Funciones llamadas:

FindLeaf: Localiza el nodo hoja que contiene E.
CondenseTree: Ajusta el árbol tras la eliminación, eliminando nodos con pocas entradas y reinsertando entradas huérfanas.
Propósito:

Eliminar dinámicamente registros de índice.
Mantener el balanceo y la eficiencia del árbol.
Ejemplo:

Para eliminar E, FindLeaf localiza el nodo hoja L. CondenseTree elimina E y, si L tiene menos de m entradas, lo elimina y reinserta sus entradas.
Contexto de uso:

Usada en aplicaciones donde los objetos espaciales se eliminan, como en GIS o CAD.
Detalles:

La re-inserción de entradas huérfanas (en CondenseTree) refina la estructura del árbol, evitando deterioro a largo plazo.
6. Función FindLeaf (Encontrar Nodo Hoja)
Descripción: Localiza el nodo hoja que contiene un registro de índice (E).

Entrada:

T: Nodo raíz del R-Tree.
E: Registro de índice (I, tuple-identifier) a buscar.
Salida:

Nodo hoja T que contiene E, o nulo si no se encuentra.
Método (Sección 3.3, Página 4):

FL1. Búsqueda en subárboles:
Si T no es un nodo hoja:
Para cada entrada F en T:
Si F.I se superpone con E.I, llama a FindLeaf en el árbol cuyo raíz es apuntado por F.p.
Continúa hasta encontrar E o verificar todas las entradas.
FL2. Búsqueda en nodo hoja:
Si T es un nodo hoja:
Verifica cada entrada para ver si coincide con E.
Si se encuentra E, retorna T.
Funciones llamadas:

FindLeaf (recursiva): Se llama a sí misma para explorar nodos hijos.
Propósito:

Localizar el nodo hoja que contiene un registro para su eliminación.
Ejemplo:

Para encontrar E, FindLeaf desciende desde la raíz, explorando nodos cuyos rectángulos se superponen con E.I, hasta llegar a una hoja que contiene E.
Contexto de uso:

Llamada por Delete para localizar el registro a eliminar.
Detalles:

Similar a Search, pero busca una entrada específica en lugar de todas las que se superponen.
7. Función CondenseTree (Condensar Árbol)
Descripción: Ajusta el R-Tree tras una eliminación, eliminando nodos con menos de m entradas, reinsertando entradas huérfanas y ajustando rectángulos de cobertura.

Entrada:

L: Nodo hoja desde el cual se eliminó una entrada.
Salida:

El R-Tree ajustado.
Método (Sección 3.3, Página 4):

CT1. Inicializar:
Establece N = L. Inicializa un conjunto vacío Q para nodos eliminados.
CT2. Encontrar entrada padre:
Si N es la raíz, salta a CT6.
Sea P el padre de N y E_N la entrada de N en P.
CT3. Eliminar nodo con pocas entradas:
Si N tiene menos de m entradas, elimina E_N de P y agrega N a Q.
CT4. Ajustar rectángulo de cobertura:
Si N no fue eliminado, ajusta E_N.I para cubrir exactamente todas las entradas en N.
CT5. Subir un nivel en el árbol:
Establece N = P y repite desde CT2.
CT6. Reinsertar entradas huérfanas:
Reinserta todas las entradas de los nodos en Q:
Entradas de nodos hoja se reinsertan usando Insert.
Entradas de nodos no-hoja se colocan en niveles superiores para mantener las hojas en el mismo nivel.
Funciones llamadas:

Insert: Reinserta entradas huérfanas de nodos hoja.
Propósito:

Mantener la eficiencia del árbol tras eliminaciones, eliminando nodos poco llenos y reinsertando entradas para refinar la estructura.
Ejemplo:

Tras eliminar una entrada de L (m=2), L tiene 1 entrada. CondenseTree elimina L, agrega su entrada a Q, y la reinserta usando Insert.
Contexto de uso:

Llamada por Delete para ajustar el árbol tras una eliminación.
Detalles:

La re-inserción mejora la estructura a largo plazo, a diferencia de fusionar nodos como en B-Trees.
8. Función SplitNode (División de Nodo)
Descripción: Divide un nodo lleno con M+1 entradas en dos nodos, minimizando el área total de los rectángulos de cobertura.

Entrada:

Un nodo con M+1 entradas.
Salida:

Dos nodos con las entradas distribuidas.
Método (Sección 3.5, Página 5):
El documento describe tres algoritmos para SplitNode. Aquí se detalla el Quadratic Split, el más equilibrado en términos de costo y calidad (Sección 3.5.2, Página 6):

Algorithm Quadratic Split:

QS1. Elegir primera entrada para cada grupo:
Llama a PickSeeds para seleccionar dos entradas como los primeros elementos de los dos grupos.
QS2. Verificar si se terminó:
Si todas las entradas han sido asignadas, termina.
Si un grupo tiene tan pocas entradas que las restantes deben asignarse para cumplir con m, asígnalas y termina.
QS3. Seleccionar entrada para asignar:
Llama a PickNext para elegir la próxima entrada.
Agrega la entrada al grupo cuyo rectángulo de cobertura requiera la menor ampliación para incluirla. Resuelve empates eligiendo el grupo con menor área, luego el de menos entradas.
Repite desde QS2.
Funciones llamadas:

PickSeeds: Selecciona las dos primeras entradas para los grupos.
PickNext: Selecciona la siguiente entrada para asignar a un grupo.
Propósito:

Dividir un nodo lleno minimizando el área de los rectángulos de cobertura, reduciendo la superposición en búsquedas futuras.
Ejemplo:

Un nodo con M=50 tiene 51 entradas. PickSeeds selecciona dos entradas opuestas. PickNext asigna las 49 restantes, minimizando la ampliación de los rectángulos.
Contexto de uso:

Llamada por Insert y AdjustTree cuando un nodo excede M.
Detalles:

El algoritmo cuadrático tiene costo O(M²) pero produce divisiones de buena calidad. Otros algoritmos incluyen:
Exhaustive Split: Evalúa todas las particiones (exponencial, no práctico para M grande).
Linear Split: Más rápido (O(M)), pero con divisiones de menor calidad.
9. Función PickSeeds (Seleccionar Semillas)
Descripción: Selecciona dos entradas iniciales para los dos grupos en una división de nodo.

Entrada:

Conjunto de M+1 entradas.
Salida:

Dos entradas para iniciar los grupos.
Método (Sección 3.5.2, Página 6):

PS1. Calcular ineficiencia de agrupar entradas:
Para cada par de entradas E_1 y E_2:
Crea un rectángulo J que cubra E_1.I y E_2.I.
Calcula d = area(J) - area(E_1.I) - area(E_2.I) (área desperdiciada).
PS2. Elegir el par más ineficiente:
Selecciona el par con el mayor d.
Funciones llamadas:

Ninguna. Es una función auxiliar.
Propósito:

Elegir dos entradas que, si estuvieran en el mismo grupo, generarían el mayor desperdicio de área, asegurando una buena separación inicial.
Ejemplo:

Para 51 entradas, PickSeeds evalúa todos los pares y selecciona dos entradas cuyos rectángulos están más separados, maximizando d.
Contexto de uso:

Llamada por Quadratic Split para iniciar la división.
Detalles:

Garantiza que los grupos iniciales estén bien separados, mejorando la calidad de la división.
10. Función PickNext (Seleccionar Siguiente)
Descripción: Selecciona la siguiente entrada para asignar a uno de los dos grupos durante una división de nodo.

Entrada:

Conjunto de entradas no asignadas.
Dos grupos parciales.
Salida:

Una entrada para asignar a un grupo.
Método (Sección 3.5.2, Página 6):

PN1. Determinar costo de agregar cada entrada:
Para cada entrada E no asignada:
Calcula d_1: Aumento de área necesario para incluir E.I en el rectángulo de cobertura del Grupo 1.
Calcula d_2: Ídem para el Grupo 2.
PN2. Encontrar entrada con mayor preferencia:
Selecciona la entrada con la mayor diferencia |d_1 - d_2|.
Funciones llamadas:

Ninguna. Es una función auxiliar.
Propósito:

Asignar entradas a grupos minimizando la ampliación del rectángulo de cobertura.
Ejemplo:

Con 49 entradas restantes, PickNext elige una entrada que cause la menor ampliación en el Grupo 1 o 2, basándose en la mayor diferencia |d_1 - d_2|.
Contexto de uso:

Llamada por Quadratic Split para asignar entradas tras las semillas iniciales.
Detalles:

Prioriza entradas que se ajusten mejor a un grupo, reduciendo la superposición.
Flujo de Llamadas entre Funciones
Resumen del flujo:

Search:
Llama a Search (recursiva).
Usada para consultas espaciales.
Insert:
Llama a ChooseLeaf.
Llama a SplitNode → PickSeeds, PickNext.
Llama a AdjustTree → SplitNode.
Usada para agregar registros.
ChooseLeaf:
No llama a otras funciones.
Llamada por Insert.
AdjustTree:
Llama a SplitNode → PickSeeds, PickNext.
Llamada por Insert.
Delete:
Llama a FindLeaf → FindLeaf (recursiva).
Llama a CondenseTree → Insert.
Usada para eliminar registros.
FindLeaf:
Llama a FindLeaf (recursiva).
Llamada por Delete.
CondenseTree:
Llama a Insert.
Llamada por Delete.
SplitNode (Quadratic Split):
Llama a PickSeeds.
Llama a PickNext.
Llamada por Insert, AdjustTree.
PickSeeds:
No llama a otras funciones.
Llamada por Quadratic Split.
PickNext:
No llama a otras funciones.
Llamada por Quadratic Split.
Diagrama de flujo:

text

Copiar
Search → Search (recursiva)
Insert → ChooseLeaf
       → SplitNode → PickSeeds, PickNext
       → AdjustTree → SplitNode → PickSeeds, PickNext
Delete → FindLeaf → FindLeaf (recursiva)
       → CondenseTree → Insert
SplitNode → PickSeeds
          → PickNext
Ventajas y Contexto del R-Tree
El R-Tree es una estructura dinámica que indexa objetos espaciales de tamaño no nulo, adecuada para aplicaciones con actualizaciones frecuentes. Sus ventajas incluyen:

Balanceo en altura: Garantiza que todas las hojas estén al mismo nivel.
Espacio eficiente: Utilización mínima de m/M por nodo (Sección 2, Página 2).
Flexibilidad: Soporta búsquedas, inserciones y eliminaciones dinámicas sin reorganización periódica.